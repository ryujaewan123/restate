const _0x1 = _0x2;
(function (_0x3, _0x4) {
    const _0x5 = _0x2, _0x6 = _0x3();
    while (!![]) {
        try {
            const _0x7 = parseInt(_0x5(0x1a5)) / 0x1 * (-parseInt(_0x5(0x1a6)) / 0x2) + -parseInt(_0x5(0x1a7)) / 0x3 + parseInt(_0x5(0x1a8)) / 0x4 + parseInt(_0x5(0x1a9)) / 0x5 + -parseInt(_0x5(0x1aa)) / 0x6 + parseInt(_0x5(0x1ab)) / 0x7 * (-parseInt(_0x5(0x1ac)) / 0x8) + parseInt(_0x5(0x1ad)) / 0x9;
            if (_0x7 === _0x4)
                break;
            else
                _0x6['push'](_0x6['shift']());
        } catch (_0x8) {
            _0x6['push'](_0x6['shift']());
        }
    }
}(_0x9, 0x25dc5));
const _0x10 = [
    _0x1(0x1ae),
    _0x1(0x1af),
    _0x1(0x1b0) + 'te',
    _0x1(0x1b1) + _0x1(0x1b2),
    _0x1(0x1b3) + _0x1(0x1b2)
];
function _0x9() {
    const _0x11 = [
        '644545DwnHgY',
        '544956YLfaax',
        '49VDUdpN',
        '235864GJwxNi',
        '5605263ufuMVB',
        'value',
        'setState',
        'alwaysUpda',
        'topLevelCh',
        'ange',
        'anyLevelCh',
        'object',
        'has',
        'get',
        'set',
        'keys',
        'length',
        'every',
        'includes',
        'some',
        'updateOn',
        'function',
        'forEach',
        'useState',
        'find',
        'push',
        'findIndex',
        'splice',
        '2219QvjRyU',
        '96mtIzPQ',
        '786558SiwIWs',
        '277064BFUJbs'
    ];
    _0x9 = function () {
        return _0x11;
    };
    return _0x9();
}
function _0x2(_0x12, _0x13) {
    const _0x91e = _0x9();
    return _0x2 = function (_0x240, _0x16) {
        _0x240 = _0x240 - 0x1a5;
        let _0x17 = _0x91e[_0x240];
        return _0x17;
    }, _0x2(_0x12, _0x13);
}
import _0x18, { useEffect } from 'react';
function _0x19(_0x20, _0x21, _0x22 = new WeakMap()) {
    const _0x23 = _0x1;
    if (_0x20 === _0x21)
        return !![];
    if (typeof _0x20 !== _0x23(0x1b4) || _0x20 === null || typeof _0x21 !== _0x23(0x1b4) || _0x21 === null)
        return _0x20 === _0x21;
    if (_0x22[_0x23(0x1b5)](_0x20))
        return _0x22[_0x23(0x1b6)](_0x20) === _0x21;
    _0x22[_0x23(0x1b7)](_0x20, _0x21);
    const _0x24 = Object[_0x23(0x1b8)](_0x20), _0x25 = Object[_0x23(0x1b8)](_0x21);
    if (_0x24[_0x23(0x1b9)] !== _0x25[_0x23(0x1b9)])
        return ![];
    return _0x24[_0x23(0x1ba)](_0x26 => _0x25[_0x23(0x1bb)](_0x26) && _0x19(_0x20[_0x26], _0x21[_0x26], _0x22)) && _0x25[_0x23(0x1ba)](_0x27 => _0x24[_0x23(0x1bb)](_0x27));
}
function _0x28(_0x29, _0x30) {
    const _0x31 = _0x1, _0x32 = Object[_0x31(0x1b8)](_0x29), _0x33 = Object[_0x31(0x1b8)](_0x30);
    if (_0x32[_0x31(0x1b9)] !== _0x33[_0x31(0x1b9)])
        return !![];
    return _0x32[_0x31(0x1bc)](_0x34 => {
        const _0x35 = _0x31;
        if (!_0x33[_0x35(0x1bb)](_0x34))
            return !![];
        if (typeof _0x29[_0x34] !== typeof _0x30[_0x34])
            return !![];
        return _0x29[_0x34] !== _0x30[_0x34];
    });
}
function _0x36(_0x37, _0x38) {
    const _0x39 = _0x1;
    if (_0x37 === _0x38)
        return ![];
    if (typeof _0x37 !== _0x39(0x1b4) || _0x37 === null || typeof _0x38 !== _0x39(0x1b4) || _0x38 === null)
        return _0x37 !== _0x38;
    return !_0x19(_0x37, _0x38);
}
export function restate(_0x40, _0x41, _0x42) {
    const _0x43 = _0x1;
    _0x42 = _0x42 || {};
    let _0x44 = _0x42[_0x43(0x1bd)] || _0x43(0x1af);
    const _0x45 = [];
    let _0x46 = _0x40;
    const _0x47 = _0x48 => {
        const _0x49 = _0x43;
        typeof _0x48 === _0x49(0x1be) && (_0x48 = _0x48({ [_0x10[0x0]]: _0x46 }));
        if (_0x44 === updateOnTypes[_0x49(0x1b0) + 'te']) {
        } else {
            if (_0x44 === updateOnTypes[_0x49(0x1b1) + _0x49(0x1b2)] && !_0x28(_0x46, _0x48)) {
                _0x46 = _0x48;
                return;
            } else {
                if (_0x44 === updateOnTypes[_0x49(0x1b3) + _0x49(0x1b2)] && !_0x36(_0x46, _0x48)) {
                    _0x46 = _0x48;
                    return;
                }
            }
        }
        _0x45[_0x49(0x1bf)](([_0x50, _0x51]) => {
            const _0x52 = _0x49;
            if (typeof _0x51 === _0x52(0x1be) && !_0x51(_0x46, _0x48))
                return;
            _0x50(_0x48);
        }), _0x46 = _0x48;
    };
    let _0x53 = ![], _0x54 = null;
    const _0x55 = () => {
            const _0x56 = _0x43;
            if (!_0x45[_0x56(0x1b9)])
                return;
            if (_0x53)
                return;
            _0x53 = !![], _0x54 = _0x41({
                [_0x10[0x1]]: _0x47,
                [_0x10[0x0]]: _0x46
            });
        }, _0x57 = () => {
            const _0x58 = _0x43;
            if (_0x45[_0x58(0x1b9)])
                return;
            if (!_0x53)
                return;
            _0x53 = ![], typeof _0x54 === _0x58(0x1be) && _0x54();
        };
    function _0x59(_0x60) {
        const _0x61 = _0x43;
        let [_0x62, _0x63] = _0x18[_0x61(0x1c0)](_0x46);
        return useEffect(() => {
            const _0x64 = _0x61;
            if (!_0x45[_0x64(0x1c1)](([_0x65]) => _0x65 === _0x63)) {
                let _0x66 = undefined;
                if (typeof _0x60 === _0x64(0x1be))
                    _0x66 = _0x60;
                else {
                    if (typeof _0x60 === _0x64(0x1b4) && _0x60 !== null) {
                        let _0x67 = _0x60[_0x64(0x1bd)];
                        if (_0x67 === updateOnTypes[_0x64(0x1b0) + 'te']) {
                        } else {
                            if (_0x67 === updateOnTypes[_0x64(0x1b1) + _0x64(0x1b2)])
                                _0x66 = (_0x68, _0x69) => _0x28(_0x68, _0x69);
                            else
                                _0x67 === updateOnTypes[_0x64(0x1b3) + _0x64(0x1b2)] && (_0x66 = (_0x70, _0x71) => _0x36(_0x70, _0x71));
                        }
                    }
                }
                _0x45[_0x64(0x1c2)]([
                    _0x63,
                    _0x66
                ]);
            }
            return _0x55(), () => {
                const _0x72 = _0x64;
                let _0x73 = _0x45[_0x72(0x1c3)](([_0x74]) => _0x74 === _0x74);
                _0x73 !== -0x1 && _0x45[_0x72(0x1c4)](_0x73, 0x1), _0x57();
            };
        }, []), [
            _0x62,
            _0x47
        ];
    }
    const _0x75 = _0x76 => _0x59(_0x76);
    return _0x75[_0x43(0x1b6)] = () => _0x46, _0x75[_0x43(0x1b7)] = (..._0x77) => _0x47(..._0x77), _0x75;
}
export const updateOnTypes = {
    [_0x10[0x2]]: _0x1(0x1b0) + 'te',
    [_0x10[0x3]]: _0x1(0x1b1) + _0x1(0x1b2),
    [_0x10[0x4]]: _0x1(0x1b3) + _0x1(0x1b2)
};